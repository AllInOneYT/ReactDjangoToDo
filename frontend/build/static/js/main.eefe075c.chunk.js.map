{"version":3,"sources":["Components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","className","onClick","this","props","strikeClick","task","completed","title","btnEdit","btnDelete","React","Component","App","state","todoList","activeItem","id","editing","fetchTasks","bind","handleChange","handleSubmit","startEdit","strikeItem","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","fetch","method","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","getCookie","headers","body","JSON","stringify","console","log","catch","err","tasks","onSubmit","onChange","type","map","index","key","deleteItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.eefe075c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport '../App.css'\r\n\r\nclass List extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"row p-2 list_item m-2\">\r\n                <div className=\"col-8\" onClick={this.props.strikeClick}>\r\n                {this.props.task.completed ? <strike>{this.props.task.title}</strike> : <span>{this.props.task.title}</span>}\r\n                </div>\r\n                <div className=\"col-2\">\r\n                <button className=\"btn w-100 btn-warning\" onClick={this.props.btnEdit}>Edit</button>\r\n                </div>\r\n\r\n                <div className=\"col-2\">\r\n                <button className=\"btn w-100 btn-danger\" onClick={this.props.btnDelete}>Delete</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React from 'react';\nimport './App.css';\nimport List from \"./Components/List\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todoList: [],\n      activeItem: {\n        id: null,\n        title: '',\n        completed: false\n      },\n      editing: false\n    }\n\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.startEdit = this.startEdit.bind(this)\n    this.strikeItem = this.strikeItem.bind(this)\n  }\n\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n\n  componentDidMount() {\n    this.fetchTasks()\n  }\n\n  fetchTasks() {\n\n    fetch(\"http://127.0.0.1:8000/api/task-list/\", {\n      method: \"GET\"\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          todoList: data\n        })\n      })\n  }\n\n  handleChange(e) {\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem,\n        title: e.target.value\n      }\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n\n    const csrftoken = this.getCookie('csrftoken')\n\n    if (this.state.editing) {\n      fetch(`http://127.0.0.1:8000/api/task-update/${this.state.activeItem.id}/`, {\n        method: \"PUT\",\n        // mode: 'same-origin',\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken\n        },\n        body: JSON.stringify(this.state.activeItem)\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        this.fetchTasks()\n        this.setState({\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false\n          },\n          editing:false\n        })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n      \n    }\n    else {\n      fetch(\"http://127.0.0.1:8000/api/task-create/\", {\n        method: \"POST\",\n        // mode: 'same-origin',\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken\n        },\n        body: JSON.stringify(this.state.activeItem)\n      })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          this.fetchTasks()\n          this.setState({\n            activeItem: {\n              id: null,\n              title: \"\",\n              completed: false\n            }\n          })\n        })\n        .catch(err => {\n          console.log(err)\n        })\n\n    }\n  }\n\n  startEdit(task) {\n    this.setState({\n      activeItem: task,\n      editing: true\n    })\n  }\n\n  deleteItem(id){\n    fetch(`http://127.0.0.1:8000/api/task-delete/${id}/`,{\n      method: \"DELETE\",\n      headers:{\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": this.getCookie('csrftoken')\n      }\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      this.fetchTasks()\n    })\n  }\n\n  strikeItem(task){\n    task.completed = !task.completed\n    const csrftoken = this.getCookie('csrftoken')\n    fetch(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n        method: \"PUT\",\n        // mode: 'same-origin',\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"X-CSRFToken\": csrftoken\n        },\n        body: JSON.stringify(task)\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        this.fetchTasks()\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  render() {\n    let tasks = this.state.todoList\n\n    return (\n      <div className=\"container my-5 bg-light p-5\">\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <form  onSubmit={this.handleSubmit}>\n              <div className=\"row p-2\">\n\n                <div className=\"col-10\">\n                  <input className=\"form-control\" onChange={this.handleChange} value={this.state.activeItem.title} type=\"text\" name=\"title\"/>\n                </div>\n\n                <div className=\"col-2\">\n                  <button className=\"btn w-100 btn-primary\">Submit</button>\n                </div>\n\n              </div>\n\n            </form>\n\n          </div>\n          </div>\n\n          <div className=\"row\">\n\n          <div className=\"col-12\" >\n            {tasks.map((task, index) => {\n              return (\n                <List \n                  task={task}\n                  key={index} \n                  btnDelete={this.deleteItem.bind(this, task.id)} \n                  btnEdit={this.startEdit.bind(this, task)} \n                  strikeClick={this.strikeItem.bind(this, task)} \n                />\n\n              )\n            })}\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}